(define x 9)
(define add2
  (lambda (x)
    (set! x (+ x 2))
    x))
(add2 3)
(add2 x)
(define counter 0)

(define bump-counter
  (lambda ()
    (set! counter (+ counter 1))
    counter))
(bump-counter)
(bump-counter)
counter
(bump-counter)

(let ((x 1)
      (y 2)
      (z 3))
  (list x y z))
(let ((x 1)
      (y x))
  (+ x y))
(let* ((x 1)
       (y x))
  (+ x y))
(let ((x 1))
  (let ((y x))
    (+ x y)))
(let ((cons (lambda (x y) (+ x y))))
  (cons 1 2))

(let ((counter 99))
  (display (bump-counter)) (newline)
  (display (bump-counter)) (newline)
  (display (bump-counter)) (newline))