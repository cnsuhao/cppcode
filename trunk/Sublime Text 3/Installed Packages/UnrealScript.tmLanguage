<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>uc</string>
		<string>uci</string>
	</array>

	<key>foldingStartMarker</key>
	<string>/\*\*|\{\s*$</string>

	<key>foldingStopMarker</key>
	<string>\*\*/|^\s*\}</string>

	<key>keyEquivalent</key>
	<string>^~U</string>

	<key>name</key>
	<string>UnrealScript</string>

	<key>patterns</key>
	<array>
		<!-- /* ... */ -->
		<dict>
			<key>begin</key>
			<string>/\*</string>

			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.source.uc</string>
				</dict>
			</dict>

			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.comment.source.uc</string>
						</dict>

						<key>2</key>
						<dict>
							<key>name</key> <!-- TODO: add variable entity highlighting -->
							<string>entity.name.function.source.uc</string>
						</dict>

						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.language.comment.source.uc</string>
						</dict>
					</dict>

					<key>match</key>
					<string>(?i:(@parameter|@param)\s*|@)([a-z-A-Z_][a-z-A-Z_0-9]+)|(?i:(TODO|HACK|FIXME|WARNING|NOTE|INFO|HELP)):</string>
				</dict>
			</array>

			<key>end</key>
			<string>\*/</string>

			<key>name</key>
			<string>comment.block.source.uc</string>
		</dict>

		<!-- ... */ ... \n -->
		<dict>
			<key>match</key>
			<string>\*/.*\n</string>

			<key>name</key>
			<string>invalid.illegal.stray-comment-end.source.uc</string>
		</dict>

		<!-- // ... \n -->
		<dict>
			<key>begin</key>
			<string>//</string>


			<key>end</key>
			<string>$\n?</string>

			<key>name</key>
			<string>comment.line.double-slash.source.uc</string>

			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.comment.source.uc</string>
						</dict>

						<key>2</key>
						<dict>
							<key>name</key> <!-- TODO: add variable entity highlighting -->
							<string>entity.name.function.source.uc</string>
						</dict>

						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.language.comment.source.uc</string>
						</dict>
					</dict>

					<key>match</key>
					<string>(?i:(@parameter|@param)\s*|@)([a-z-A-Z_][a-z-A-Z_0-9]+)|(?i:(TODO|HACK|FIXME|WARNING|NOTE|INFO|HELP)):</string>
				</dict>
			</array>
		</dict>

		<!-- preprocessor dict -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.language.preprocessor.source.uc</string>
				</dict>

				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.preprocessor.source.uc</string>
				</dict>
			</dict>

			<key>match</key>
			<string>(`)(?i:(if|else|endif|define|undefine|include|isdefined|notdefined|log|logd|warn|assert))?(.*{0})</string>
		</dict>

		<!-- Although these are modifiers, it's nice to keep them in sync with class, interface, struct, and state -->
		<dict>
			<key>match</key>
			<string>\b(?i:(extends|expands|within))\b</string>
			<key>name</key>
			<string>keyword.language.source.uc</string>
		</dict>

		<!-- declaration keywords(var is defined else where) -->
		<dict>
			<key>match</key>
			<string>\b(?i:(class|interface|event|function|state|ignores|const|local|struct|enum|operator|preoperator|postoperator))\b</string>
			<key>name</key>
			<string>keyword.language.source.uc</string>
		</dict>

		<!-- block keywords -->
		<dict>
			<key>match</key>
			<string>((?i:\b(((structdefaultproperties|defaultproperties|cpptext|structcpptext|cppstruct|replication))|)\b)(i:[\s\n]*\{)?)|((?i:\b(?m:begin\s+object)|(?m:end\s+object))\b)</string>
			<key>name</key>
			<string>keyword.language.source.uc</string>
		</dict>

		<!-- Any modifier with multiple CLASS type parameters such as DependsOn -Eliot -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key><dict><key>name</key><string>storage.modifier.source.uc</string></dict>
				<key>3</key><dict><key>name</key><string>storage.type.source.uc</string></dict>
			</dict>
			<key>match</key>
			<string>(?i:(dependson|implements|classgroup))(\s*?\((?'CLASS_NAME'\s*?([a-z-A-Z_][a-z-A-Z_0-9]+)\s*?,?)\g'CLASS_NAME'*\s*?\)?)?</string>
		</dict>

		<!-- Any modifier with multiple NAME parameters such as HideCategories(Don't put Var(...) in here because that's an declaration!) -Eliot -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key><dict><key>name</key><string>storage.modifier.source.uc</string></dict>
				<key>3</key><dict><key>name</key><string>string.quoted.single.uc</string></dict>
			</dict>
			<key>match</key>
			<string>(?i:(hidecategories|showcategories|autocollapsecategories|dontautocollapsecategories|autoexpandcategories|dontsortcategories))(\s*?\((?'CLASS_NAME'\s*?([a-z-A-Z_][a-z-A-Z_0-9]+)\s*?,?)\g'CLASS_NAME'*\s*?\)?)?</string>
		</dict>

		<!--
			Parses the following(FIXME: except for test4):

			var() bool test1;
			var(a) bool test2;
			var(b, c) bool test3;
			var(d, e, f) bool test4;
		-->
		<dict>
			<key>captures</key>
			<dict>
				<!-- var -->
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.language.source.uc</string>
				</dict>

				<!-- first NAME -->
				<key>3</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single.uc</string>
				</dict>

				<!-- second NAME -->
				<key>4</key>
				<dict>
					<key>name</key>
					<string>string.quoted.single.uc</string>
				</dict>
			</dict>

			<key>match</key>
			<string>\b(?i:(var))\b(\s*?\(\s*?([a-z-A-Z_][a-z-A-Z_0-9]+)\s*?,?\s*?([a-z-A-Z_][a-z-A-Z_0-9]+)\s*?\))?</string>
		</dict>

		<!-- Any modifier with a single NAME parameter such as dllbind|config|classgroup -Eliot -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key><dict><key>name</key><string>storage.modifier.source.uc</string></dict>
				<key>3</key><dict><key>name</key><string>string.quoted.single.uc</string></dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(config|dllbind|native|inherits))\b(\s*?\(\s*?([a-z-A-Z_][a-z-A-Z_0-9]+)\s*?\))?</string>
		</dict>

		<!-- modifier keywords (config is defined else where)-->
		<dict>
			<key>match</key>
			<string>\b(?i:(nativeonly|abstract|intrinsic|exportstructs|export|noexport|noexportheader|nativereplication|public|private|transient|nontransient|deprecated|editconst|final|simulated|out|localized|globalconfig|protected|auto|nousercreate|notplaceable|placeable|skip|coerce|iterator|immutable|immutablewhencooked|atomic|atomicwhencooked|interp|editoronly|reliable|unreliable|server|client||exec|editinline|editinlinenotify|editinlineuse|editinlinenew|noteditinlinenew|repnotify|optional|virtual|edithide|automated|cache|cacheexempt|noimport|noclear|protectedwrite|privatewrite|forcescriptorder|perobjectconfig|perobjectlocalized|init|hidedropdown|collapsecategories|dontcollapsecategories|safereplace|parseconfig|instanced|databinding|duplicatetransient|input|travel|edfindable|editconstarray|editfixedsize|editortextbox|nontransactional|serializetext|notforconsole|repretry|archetype|crosslevelactive|crosslevelpassive|long|strictconfig|k2call|k2override|k2pure|singular|demorecording|dllimport|latent))\b</string>
			<key>name</key>
			<string>storage.modifier.source.uc</string>
		</dict>

		<!-- literal keywords -->
		<dict>
			<key>match</key>
			<string>\b(?i:(none|true|false|vect|rot|rng))\b</string>
			<key>name</key>
			<string>constant.language.source.uc</string>
		</dict>

		<!-- specifier keywords -->
		<dict>
			<key>match</key>
			<!-- 
				class'a' 
					?.const.constName 
					?.static.functionName 
					?.default.varName

			 	super|global|static.functionName 
			 	self|default|const.fieldName
			-->
			<string>\b(?i:(default|super|global|static|const|self))\b</string>
			<key>name</key>
			<string>constant.language.source.uc</string>
		</dict>

		<!-- Built-in data types -->
		<dict>
			<key>match</key>
			<string>\b(?i:(byte|int|bool|array|map|delegate|button|class|float|name|string))\b</string>
			<key>name</key>
			<string>storage.type.source.uc</string>
		</dict>

		<!-- Metafields(http://wiki.beyondunreal.com/Metadata ... An article I wrote on metadata - Eliot) -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.meta.source.uc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.meta.source.uc</string>
				</dict>
			</dict>

			<key>match</key>
			<string>\b(?i:(AllowAbstract|ArrayClamp|AutoComment|bShowOnlyWhenTrue|ClampMax|ClampMin|DisplayName|DMCOnly|EditCondition|FixedIncrement|FullyExpand|MaxPropertyDepth|MultilineWithMaxRows|Multiple|OrderIndex|RealTime|ScriptOrder|ToolTip|UIMax|UIMin)\s*=([^|>]*))\b</string>
		</dict>

		<!-- Common objects -->
		<dict>
			<key>match</key>
			<string>\b(?i:(Actor|ActorComponent|Component|Pawn|WorldInfo|PhysicalMaterial|SoundCue|ParticleSystem|SkeletalMeshComponent|Controller|PlayerController|DamageType|StaticMeshComponent|PlayerReplicationInfo|Canvas|HUD|Volume|PhysicsVolume|FluidSurfaceActor|Object|SpriteComponent|Inventory|PrimitiveComponent|ParticleSystemComponent|LightEnvironmentComponent|ForceFeedbackWaveform|AudioComponent|DynamicLightEnvironmentComponent|LightEnvironment|StaticMesh|MaterialInterface|LadderVolume|PlayerStart|CylinderComponent|InventoryManager|Weapon|Mesh|PlayerInput|GFxClikWidget|GFxObject|Material|WidgetBindings|AnimNodeSequence|MaterialInstanceConstant|Property|Teleporter|LocalMessage|Projectile|InterpGroup|FaceFXAnimSet|SkelControlBase|RB_BodyInstance|SequenceOp|SequenceAction|SequenceCondition|SequenceEvent|SequenceFrame|SequenceObject|SequenceOp|SequenceVariable|SequenceFrameWrapped|SequenceObjectHelper|AnimSequence))\b</string>
			<key>name</key>
			<string>storage.type.source.uc</string>
		</dict>

		<!-- Common data structures -->
		<dict>
			<key>match</key>
			<string>\b(?i:(rotator|vector|scale|quat|qword|double|color|pointer|linearcolor|vector2d|vector4|twovectors|plane|intpoint|guid|box|boxspherebounds|matrix|cylinder|BoneAtom|TraceHitInfo|ImpactInfo|AnimSlotInfo|AnimSlotDesc|PhysEffectInfo|ActorReference|NavReference|BasedPosition|CollisionImpactData))\b</string>
			<key>name</key>
			<string>storage.struct.source.uc</string>
		</dict>

		<!-- Common enumerations -->
		<dict>
			<key>match</key>
			<string>\b(?i:(AlphaBlendType|EAxis|EInputEvent|EPhysics|ENetRole|ECollisionType|ETickingGroup|EDoubleClickDir|ETravelType|EMoveDir|EActorMetricsType))\b</string>
			<key>name</key>
			<string>storage.enum.source.uc</string>
		</dict>

		<!-- Common constants defined in Object and Actor that serve a purpose in subclasses -->
		<dict>
			<key>match</key>
			<string>\b(?i:(MaxInt|RadToDeg|DegToRad|UnrRotToRad|RadToUnrRot|DegToUnrRot|UnrRotToDeg|INDEX_NONE|Pi|AspectRatio4x3|AspectRatio5x4|AspectRatio16x9|InvAspectRatio4x3|InvAspectRatio5x4|InvAspectRatio16x9|MINFLOORZ|ACTORMAXSTEPHEIGHT|TRACEFLAG_Bullet|TRACEFLAG_PhysicsVolumes|TRACEFLAG_SkipMovers|TRACEFLAG_Blocking|TRACEFLAG_ForceController))\b</string>
			<key>name</key>
			<string>storage.constant.source.uc</string>
		</dict>

		<!-- UnrealScript flow keywords -->
		<dict>
			<key>match</key>
			<string>\b(?i:(filtereditoronly|if|else|break|continue|do|until|while|goto|assert|return|for|foreach|switch|case))\b</string>
			<key>name</key>
			<string>keyword.control.source.uc</string>
		</dict>

		<!-- compile constants(assert is actually an hardcoded function - Eliot) -->
		<dict>
			<key>match</key>
			<string>\b(?i:(nameof|arraycount|enumcount))\b</string>
			<key>name</key>
			<string>constant.language.source.uc</string>
		</dict>

		<!-- decimals and hexadecimals -->
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(F|f)?\b</string>
			<key>name</key>
			<string>constant.numeric.source.uc</string>
		</dict>

		<!-- Matches any operator punctuations and known named operators -->
		<dict>
			<key>match</key>
			<string>([?:+\-/%*=&lt;&gt;^+~!|&amp;$@]+)|(\b(?i:(Dot|Cross|ClockwiseFrom)?)\b)</string>
			<key>name</key>
			<string>keyword.operator.source.uc</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(New))\b</string>
			<key>name</key>
			<string>keyword.control.source.uc</string>
		</dict>

		<dict>
			<key>match</key>
			<string>([,.;\(\)\[\{}]]+)</string>
			<key>name</key>
			<string>punctuation.language.source.uc</string>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key><dict><key>name</key><string>entity.name.function.source.uc</string></dict>
			</dict>
			<key>match</key>
			<string>([a-z-A-Z_][a-z-A-Z_0-9]*)\s*?(\()</string>
		</dict>

		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.uc</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.uc</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.uc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.uc</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.uc</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.uc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
			</array>
		</dict>
	</array>

	<key>repository</key>
	<dict>
		<key>access</key>
		<dict>
			<key>match</key>
			<string>\.[a-zA-Z_][a-zA-Z_0-9]*\b(?!\s*\()</string>
			<key>name</key>
			<string>variable.other.dot-access.uc</string>
		</dict>

		<!-- Syntax that's only valid within braces { ... } -->
		<key>block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>

			<key>end</key>
			<string>\}</string>

			<key>name</key>
			<string>meta.block.uc</string>

			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>

		<!-- Syntax that's only valid within braces { ... } -->
		<key>block_innards</key>
		<dict>
			<key>patterns</key>
			<array>
			</array>
		</dict>

		<key>parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.parens.uc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>

		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2})</string>
					<key>name</key>
					<string>constant.character.escape.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.c</string>
				</dict>
			</array>
		</dict>
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)%
    						(\d+\$)?                             # field (argument #)
    						[#0\- +']*                           # flags
    						[,;:_]?                              # separator character (AltiVec)
    						((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
    						(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
    						(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
    						[diouxXDOUeEfFgGaACcSspn%]           # conversion type
    					</string>
					<key>name</key>
					<string>constant.other.placeholder.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%</string>
					<key>name</key>
					<string>invalid.illegal.placeholder.c</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.uc</string>
	<key>uuid</key>
	<string>077E5343-191C-4618-BB9F-FED76FAD1B8C</string>
</dict>
</plist>